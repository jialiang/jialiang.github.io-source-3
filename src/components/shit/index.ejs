<!-- prettier-ignore -->
<section id="!shit" class="shit article" tabindex="-1">
  <div class="scroll-container" tabindex="0">
  <main class="text-container">
    <%- md(`
# <span>Shit</span><br aria-hidden="true" /><span>Compressor</span>

<small>*Written on 1 Jan 2021*</small>

[Github repository](https://github.com/jialiang/ShitCompressor)

---

## What is it?

It's a image compressor with a graphical user interface (GUI) that does lossy compressions of JPG and PNG to JPG and WEBP. It also generates [SSIMULACRA](https://github.com/cloudinary/ssimulacra) and [Butteraugli](https://github.com/google/butteraugli) scores as well as a SSIM Map and Edge Artifact map for your compressed image.

This is not a web application but rather a Windows Presenter Foundation (WPF) desktop application build using .NET 5 and C#.

The name was inspired by one of the "thoughs" in the game Disco Elysium called [Volumetric Shit Compressor](https://discoelysium.gamepedia.com/Volumetric_Shit_Compressor).

## Motivation

I created this program because I felt that existing GUI image compressors out there doesn't fulfill some of my needs, namely:

1. I want an objective measure of the loss of image quality caused by the compression.
2. I want to know the difference in output created by the various image encoders used (Image encoders in this context is the different engine responsible for compressing the image e.g. Guetzli, MozJpeg etc).
3. I want to be able to choose which output generated by the various image encoders to save rather than only being able to save the output with the smallest size.
4. I want to be able to adjust how much the various image encoders should prioritize quality over size.

These problems only happen when performing lossy image compression because in lossless compression:

- There is no loss of quality.
- All output is identical, thus only the smallest size matters.

Problem 1 is solved by generating the [SSIMULACRA](https://github.com/cloudinary/ssimulacra) and [Butteraugli](https://github.com/google/butteraugli) scores for the compressed image. These scores are an indication of the perceived loss in image quality due to compression. You should visit the links to their repository to learn more about how they work. In my case, I mostly use the SSIMULACRA score with the Butteraugli score serving as a 2nd opinion as needed.

Problem 2 is solved by generating a SSIM Map and Edge Artifact map for the compressed image. An SSIM map is a heatmap of the compressed image whose colors correspond to the weight each part of the image contributes to the SSIM score. An Edge Artifact map illustrates compression artifacts that creates edges like ringing and blocking artifacts. You can see this article [Baseline JPEG and JPEG2000 Artifacts Illustrated](http://www.stat.columbia.edu/~jakulin/jpeg/artifacts.htm) for a illustration of some of artifacts caused by JPEG compression.

Problem 3 and 4 is merely a UI problem and can be solved by exposing the relevant controls to the user.

---

<small>*Information presented here is true at the time of writing*</small>
    `) %>
  </main>
  </div>
</section>
